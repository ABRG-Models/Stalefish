/*
 * A utility to create a base stalefish json file from a directory full of files.
 *
 * Usage: sfmakejson -t 0.1 -f imagefile1 -f image2 -f image3 etc
 * or
 * Usage: sfmakejson -t 0.1 imagefile1 image2 image3 etc
 *
 * Run the program from the same place you'll run stalefish
 */
#include <string>
#include <iostream>
#include <vector>
#include <popt.h>

// cmd line arg features
struct CmdOptions
{
    // Distance from slice to slice
    double dx = 0.1;
    // Other options match those in json
    double thickness = 0.1;
    int pixels_per_mm = 233;
    // string value for each image file path
    char* imagefile = nullptr;
    // The image files to include in the stalefish json file
    std::vector<std::string> imagefiles;
};

// cmdOptions global for callbacks
struct CmdOptions cmdOptions;

// This callback is used to allow multiple image files
void popt_option_callback (poptContext con,
                           enum poptCallbackReason reason,
                           const struct poptOption* opt,
                           const char* arg,
                           void* data)
{
    switch(reason) {
    case POPT_CALLBACK_REASON_PRE: { break; } // Doesn't occur
    case POPT_CALLBACK_REASON_POST: { break; } // Ignore
    case POPT_CALLBACK_REASON_OPTION:
    {
        // Test shortName. This means we could respond to other "multiple options"
        if (opt->shortName == 'f') {
            cmdOptions.imagefiles.push_back (cmdOptions.imagefile);
        }
        break;
    }
    }
}

int main (int argc, char** argv)
{
    struct poptOption opt[] = {
        POPT_AUTOHELP

        {"dx", 'd',
         POPT_ARG_DOUBLE, &(cmdOptions.dx), 0, // 0 is 'val' which is available in callbacks
         "The distance from one slice in the set to the next in mm."},

        {"thickness", 't',
         POPT_ARG_DOUBLE, &(cmdOptions.thickness), 0,
         "The thickness of each slice in mm."},

        {"pixels_per_mm", 'p',
         POPT_ARG_INT, &(cmdOptions.pixels_per_mm), 0,
         "Number of pixels in each image to span 1 mm. The image's spatial scale."},

        // options following this will cause the popt_option_callback to be executed.
        { "callback", '\0',
          POPT_ARG_CALLBACK|POPT_ARGFLAG_DOC_HIDDEN, (void*)&popt_option_callback, 0,
          NULL, NULL },

        {"imagefile", 'f',
         POPT_ARG_STRING, &(cmdOptions.imagefile), 0,
         "Add an image file to include in the json slices array. Provide an argument "
         "like /path/to/file.tif. This option can be used multiple times, and you can "
         "even leave the -f out; any 'non-option' strings on your command line will be "
         "interpreted as image files."},

        POPT_AUTOALIAS
        POPT_TABLEEND
    };
    poptContext con;
    con = poptGetContext (argv[0], argc, (const char**)argv, opt, 0);
    while (poptGetNextOpt(con) != -1) {}
    const char* argg = (char*)0;
    while ((argg = poptGetArg(con)) != (char*)0) {
        // Treat any extra args as files.
        cmdOptions.imagefiles.push_back (std::string(argg));
    }
    // Generate the json and output to stdout
    std::cout << "{\n"
              << "  \"description\" : \"Stalefish project configuration generated by sfmakejson\",\n"
              << "  \"thickness\" : " << cmdOptions.thickness << ",\n"
              << "  \"pixels_per_mm\" : " << cmdOptions.pixels_per_mm  << ",\n"
              << "  \"bg_blur_screen_proportion\" : 0.1667,\n"
              << "  \"bg_blur_subtraction_offset\" : 180,\n"
              << "  \"save_per_pixel_data\" : true,\n"
              << "  \"save_auto_align_data\" : true,\n"
              << "  \"save_landmark_align_data\" : true,\n"
              << "  \"rotate_landmark_one\" : true,\n"
              << "  \"rotate_align_landmarks\" : false,\n"
              << "  \"map_align_angle\" : 3.14159267,\n"
              << "  \"slices\" : [";

    double x = 0.0;
    bool first = true;
    for (auto f : cmdOptions.imagefiles) {
        if (first) {
            std::cout << "\n    ";
            first = false;
        } else {
            std::cout << ",\n    ";
        }
        std::cout << "{ \"filename\" : \"" << f << "\", \"x\" : " << x << " }";
        x += cmdOptions.dx;
    }
    std::cout << "\n  ]\n}\n";

    return 0;
}
